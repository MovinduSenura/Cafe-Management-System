name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # Test and Lint
    test:
        name: Test and Lint
        runs-on: ubuntu-latest
        continue-on-error: true
        strategy:
            fail-fast: false
            matrix:
                service:
                    [
                        api-gateway,
                        user-service,
                        customer-service,
                        menu-service,
                        order-service,
                        payment-service,
                        inventory-service,
                        reservation-service,
                        notification-service,
                        report-service,
                    ]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "npm"
                  cache-dependency-path: "Backend/${{ matrix.service }}/package-lock.json"

            - name: Install dependencies
              working-directory: Backend/${{ matrix.service }}
              run: |
                  if [ -f "package-lock.json" ]; then
                    npm ci
                  else
                    npm install
                  fi

            - name: Run linting
              working-directory: Backend/${{ matrix.service }}
              run: |
                  if npm run lint:check; then
                    echo "Linting passed"
                  else
                    echo "Linting issues found, but continuing..."
                  fi

            - name: Run tests
              working-directory: Backend/${{ matrix.service }}
              run: |
                  if npm test; then
                    echo "Tests passed"
                  else
                    echo "Some tests failed, but continuing..."
                  fi

            - name: Generate test coverage
              working-directory: Backend/${{ matrix.service }}
              run: |
                  if npm run test:coverage; then
                    echo "Coverage generated"
                  else
                    echo "Coverage generation failed, but continuing..."
                  fi

            - name: Upload coverage to Codecov
              if: success() || failure()
              uses: codecov/codecov-action@v3
              with:
                  file: Backend/${{ matrix.service }}/coverage/lcov.info
                  flags: ${{ matrix.service }}
                  name: ${{ matrix.service }}-coverage
                  fail_ci_if_error: false

    # Security Scanning
    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results.sarif"

            - name: Run npm audit
              run: |
                  cd Backend || cd BACKEND
                  echo "## Security Audit Results" > audit-results.txt
                  for service in api-gateway user-service customer-service menu-service order-service payment-service inventory-service reservation-service notification-service report-service; do
                    if [ -d "$service" ] && [ -f "$service/package.json" ]; then
                      echo "### Auditing $service" >> audit-results.txt
                      cd "$service"
                      if npm audit --audit-level moderate >> ../audit-results.txt 2>&1; then
                        echo "✅ $service: No issues found" >> ../audit-results.txt
                      else
                        echo "⚠️  $service: Issues found (check above)" >> ../audit-results.txt
                      fi
                      cd ..
                    fi
                  done
                  echo "Security audit completed. Check audit-results.txt for details."
                  cat audit-results.txt

    # Build and Push Images
    build:
        name: Build and Push Images
        runs-on: ubuntu-latest
        needs: [test, security]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        strategy:
            matrix:
                service:
                    [
                        api-gateway,
                        user-service,
                        customer-service,
                        menu-service,
                        order-service,
                        payment-service,
                        inventory-service,
                        reservation-service,
                        notification-service,
                        report-service,
                    ]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix=sha-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: Backend/${{ matrix.service }}
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # Deploy to Staging
    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [build]
        if: github.ref == 'refs/heads/develop' && github.repository == 'ravin00/Cafe-Management-System'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Staging Deployment (Manual)
              run: |
                  echo "Staging deployment would happen here"
                  echo "Build completed for commit: ${{ github.sha }}"
                  echo "Images tagged as: sha-${{ github.sha }}"
                  echo "To deploy manually:"
                  echo "   1. Configure kubectl for staging cluster"
                  echo "   2. Run: helm upgrade --install cafe-management-staging ./infrastructure/helm/cafe-management"

    # Deploy to Production  
    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [build]
        if: github.ref == 'refs/heads/main' && github.repository == 'ravin00/Cafe-Management-System'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Production Deployment (Manual)
              run: |
                  echo "Production deployment would happen here"
                  echo "Build completed for commit: ${{ github.sha }}"
                  echo "Images tagged as: sha-${{ github.sha }}"
                  echo "To deploy manually:"
                  echo "   1. Configure kubectl for production cluster"
                  echo "   2. Run: helm upgrade --install cafe-management ./infrastructure/helm/cafe-management"
                  echo "   3. Update ArgoCD applications if needed"

    # Notify
    notify:
        name: Notify Build Status
        runs-on: ubuntu-latest
        needs: [test, security, build]
        if: always()

        steps:
            - name: Build Status Summary
              run: |
                  echo "## Build Summary"
                  echo "**Repository:** ${{ github.repository }}"
                  echo "**Branch:** ${{ github.ref_name }}"
                  echo "**Commit:** ${{ github.sha }}"
                  echo "**Actor:** ${{ github.actor }}"
                  echo "**Status:** ${{ job.status }}"
                  
                  if [ "${{ job.status }}" = "success" ]; then
                    echo "All checks passed!"
                  else
                    echo "Some checks failed. Please review the logs."
                  fi
