name: Infrastructure Deployment

on:
    push:
        branches: [main]
        paths:
            - "infrastructure/**"
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

jobs:
    # Validate Infrastructure
    validate:
        name: Validate Infrastructure
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Helm
              uses: azure/setup-helm@v3
              with:
                  version: "latest"

            - name: Validate Helm Charts
              run: |
                  helm lint ./infrastructure/helm/cafe-management
                  helm template cafe-management ./infrastructure/helm/cafe-management --debug

            - name: Validate Kubernetes Manifests
              run: |
                  kubectl --dry-run=client apply -f infrastructure/k8s/
                  kubectl --dry-run=client apply -f infrastructure/monitoring/

    # Deploy ArgoCD
    deploy-argocd:
        name: Deploy ArgoCD
        runs-on: ubuntu-latest
        needs: [validate]
        environment: ${{ github.event.inputs.environment || 'production' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "latest"

            - name: Configure kubectl
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

            - name: Install ArgoCD
              working-directory: infrastructure/argocd
              run: |
                  chmod +x setup-argocd.sh
                  ./setup-argocd.sh install

            - name: Wait for ArgoCD to be ready
              run: |
                  kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=600s

    # Deploy Monitoring Stack
    deploy-monitoring:
        name: Deploy Monitoring Stack
        runs-on: ubuntu-latest
        needs: [deploy-argocd]
        environment: ${{ github.event.inputs.environment || 'production' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "latest"

            - name: Configure kubectl
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

            - name: Install Monitoring Stack
              working-directory: infrastructure/monitoring
              run: |
                  chmod +x setup-monitoring.sh
                  ./setup-monitoring.sh install

            - name: Wait for Monitoring to be ready
              run: |
                  kubectl wait --for=condition=available deployment/prometheus -n monitoring --timeout=600s
                  kubectl wait --for=condition=available deployment/grafana -n monitoring --timeout=600s

    # Configure ArgoCD Applications
    configure-argocd-apps:
        name: Configure ArgoCD Applications
        runs-on: ubuntu-latest
        needs: [deploy-monitoring]
        environment: ${{ github.event.inputs.environment || 'production' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "latest"

            - name: Configure kubectl
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

            - name: Install ArgoCD CLI
              run: |
                  curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                  chmod +x argocd
                  sudo mv argocd /usr/local/bin/

            - name: Configure ArgoCD Applications
              run: |
                  kubectl apply -f infrastructure/argocd/project.yaml
                  kubectl apply -f infrastructure/argocd/applications.yaml
                  kubectl apply -f infrastructure/argocd/monitoring-application.yaml

            - name: Login to ArgoCD and Sync
              run: |
                  # Port forward ArgoCD server
                  kubectl port-forward svc/argocd-server -n argocd 8080:443 &
                  sleep 10

                  # Get ArgoCD password
                  ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

                  # Login to ArgoCD
                  argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure

                  # Sync applications
                  argocd app sync cafe-management-infrastructure --timeout 600
                  argocd app sync monitoring-stack --timeout 600

    # Health Check
    health-check:
        name: Infrastructure Health Check
        runs-on: ubuntu-latest
        needs: [configure-argocd-apps]
        environment: ${{ github.event.inputs.environment || 'production' }}

        steps:
            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "latest"

            - name: Configure kubectl
              run: |
                  mkdir -p ~/.kube
                  echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

            - name: Check ArgoCD Health
              run: |
                  kubectl get pods -n argocd
                  kubectl get applications -n argocd

            - name: Check Monitoring Health
              run: |
                  kubectl get pods -n monitoring
                  kubectl get services -n monitoring

            - name: Generate Health Report
              run: |
                  echo "## Infrastructure Health Report" > health-report.md
                  echo "### ArgoCD Status" >> health-report.md
                  kubectl get applications -n argocd -o wide >> health-report.md
                  echo "### Monitoring Status" >> health-report.md
                  kubectl get pods -n monitoring >> health-report.md

            - name: Upload Health Report
              uses: actions/upload-artifact@v3
              with:
                  name: infrastructure-health-report
                  path: health-report.md
