name: Infrastructure Deployment

on:
    push:
        branches: [main]
        paths:
            - "infrastructure/**"
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

jobs:
    # Validate Infrastructure
    validate:
        name: Validate Infrastructure
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Helm
              uses: azure/setup-helm@v3
              with:
                  version: "latest"

            - name: Validate Helm Charts
              run: |
                  helm lint ./infrastructure/helm/cafe-management
                  helm template cafe-management ./infrastructure/helm/cafe-management --debug

            - name: Validate Kubernetes Manifests
              run: |
                  echo "Validating Kubernetes manifests..."
                  
                  # Check if required files exist
                  if [ -d "infrastructure/k8s/" ]; then
                    echo "K8s manifests directory found"
                    find infrastructure/k8s/ -name "*.yaml" -o -name "*.yml" | head -5
                  else
                    echo "K8s manifests directory not found"
                    exit 1
                  fi
                  
                  if [ -d "infrastructure/monitoring/" ]; then
                    echo "Monitoring manifests directory found"
                    find infrastructure/monitoring/ -name "*.yaml" -o -name "*.yml" | head -5
                  else
                    echo "Monitoring manifests directory not found"
                    exit 1
                  fi
                  
                  # Basic YAML syntax validation
                  echo "üîç Checking YAML syntax..."
                  find infrastructure/ -name "*.yaml" -o -name "*.yml" | while read file; do
                    if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                      echo "$file: Valid YAML"
                    else
                      echo "$file: Invalid YAML syntax"
                    fi
                  done

    # Deploy ArgoCD
    deploy-argocd:
        name: Deploy ArgoCD
        runs-on: ubuntu-latest
        needs: [validate]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: ArgoCD Deployment (Manual)
              run: |
                  echo "ArgoCD deployment information"
                  echo "Repository: ${{ github.repository }}"
                  echo "To deploy ArgoCD manually:"
                  echo "   1. Configure kubectl for your cluster"
                  echo "   2. Navigate to infrastructure/argocd/"
                  echo "   3. Run: chmod +x setup-argocd.sh && ./setup-argocd.sh install"
                  echo "   4. Wait for ArgoCD to be ready with:"
                  echo "      kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=600s"

    # Deploy Monitoring Stack
    deploy-monitoring:
        name: Deploy Monitoring Stack
        runs-on: ubuntu-latest
        needs: [deploy-argocd]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Monitoring Stack Deployment (Manual)
              run: |
                  echo "Monitoring stack deployment information"
                  echo "Repository: ${{ github.repository }}"
                  echo "To deploy monitoring stack manually:"
                  echo "   1. Configure kubectl for your cluster"
                  echo "   2. Navigate to infrastructure/monitoring/"
                  echo "   3. Run: chmod +x setup-monitoring.sh && ./setup-monitoring.sh install"
                  echo "   4. Wait for services to be ready with:"
                  echo "      kubectl wait --for=condition=available deployment/prometheus -n monitoring --timeout=600s"
                  echo "      kubectl wait --for=condition=available deployment/grafana -n monitoring --timeout=600s"

    # Configure ArgoCD Applications
    configure-argocd-apps:
        name: Configure ArgoCD Applications
        runs-on: ubuntu-latest
        needs: [deploy-monitoring]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: ArgoCD Configuration (Manual)
              run: |
                  echo "ArgoCD applications configuration"
                  echo "Repository: ${{ github.repository }}"
                  echo "To configure ArgoCD applications manually:"
                  echo "   1. Apply the project configuration:"
                  echo "      kubectl apply -f infrastructure/argocd/project.yaml"
                  echo "   2. Apply the applications:"
                  echo "      kubectl apply -f infrastructure/argocd/applications.yaml"
                  echo "      kubectl apply -f infrastructure/argocd/monitoring-application.yaml"
                  echo "   3. Access ArgoCD UI and sync applications"

    # Health Check
    health-check:
        name: Infrastructure Health Check
        runs-on: ubuntu-latest
        needs: [configure-argocd-apps]

        steps:
            - name: Infrastructure Status
              run: |
                  echo "## üè• Infrastructure Health Report"
                  echo "**Repository:** ${{ github.repository }}"
                  echo "**Branch:** ${{ github.ref_name }}"
                  echo "**Commit:** ${{ github.sha }}"
                  echo "**Timestamp:** $(date)"
                  echo ""
                  echo "### Deployment Guide"
                  echo "1. **ArgoCD**: Use \`./infrastructure/argocd/setup-argocd.sh install\`"
                  echo "2. **Monitoring**: Use \`./infrastructure/monitoring/setup-monitoring.sh install\`"
                  echo "3. **Applications**: Apply ArgoCD applications manually"
                  echo "4. **Access**: Use \`./access-services.sh start\` for port forwarding"
